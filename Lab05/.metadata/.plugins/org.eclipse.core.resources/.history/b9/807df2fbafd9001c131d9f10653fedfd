import java.util.Collections;
import java.util.ArrayList;
public class DVDUtils {
	public static String compareByCost(DigitalVideoDisc d1, DigitalVideoDisc d2){
		String cost_compare = "The DVD "+ d1.getTitle();
		if (d1.getCost() > d2.getCost()){
			cost_compare += (" is more expensive than the DVD " + d2.getTitle());
		}
		else if(d1.getCost() == d2.getCost()) {
			cost_compare += (" has the same price with the DVD " + d2.getTitle());
		}
		else {
			cost_compare += (" is cheaper than " + d2.getTitle());
		}
		return cost_compare;
		
	};
	public static String compareByTitle(DigitalVideoDisc d1, DigitalVideoDisc d2) {
		int title_compare_result;
		String title_compare;
		title_compare_result = d1.getTitle().compareTo(d2.getTitle());
		if (title_compare_result < 0) {
			title_compare = "The DVD "+ d1.getTitle() + " comes before" + " the DVD "+ d2.getTitle();
			}
		else if (title_compare_result == 0) {
			title_compare = "The DVD "+ d1.getTitle() + " is equal to" + " the DVD "+ d2.getTitle();

		}
		else {
			title_compare = "The DVD "+ d1.getTitle() + " comes after" + " the DVD "+ d2.getTitle();

		}
		return title_compare;
		
	}
	static void swap(DigitalVideoDisc[] arr, int i, int j)
	{
	    DigitalVideoDisc temp = arr[i];
	    arr[i] = arr[j];
	    arr[j] = temp;
	}
	 
	/* This function takes last element as pivot, places
	   the pivot element at its correct position in sorted
	   array, and places all smaller (smaller than pivot)
	   to left of pivot and all greater elements to right
	   of pivot */
	static int partition(DigitalVideoDisc[] arr, int low, int high)
	{
	     
	    // pivot
		DigitalVideoDisc pivot = arr[high];
	     
	    // Index of smaller element and
	    // indicates the right position
	    // of pivot found so far
	    int i = (low - 1);
	 
	    for(int j = low; j <= high - 1; j++)
	    {
	         
	        // If current element is smaller
	        // than the pivot
	        if (arr[j].getCost() < pivot.getCost())
	        {
	             
	            // Increment index of
	            // smaller element
	            i++;
	            swap(arr, i, j);
	        }
	    }
	    swap(arr, i + 1, high);
	    return (i + 1);
	}
	 
	/* The main function that implements QuickSort
	          arr[] --> Array to be sorted,
	          low --> Starting index,
	          high --> Ending index
	 */
	static void quickSort(DigitalVideoDisc[] arr, int low, int high)
	{
	    if (low < high)
	    {
	         
	        // pi is partitioning index, arr[p]
	        // is now at right place
	        int pi = partition(arr, low, high);
	 
	        // Separately sort elements before
	        // partition and after partition
	        quickSort(arr, low, pi - 1);
	        quickSort(arr, pi + 1, high);
	    }
	}
	 
	// Function to print an array
	public static ArrayList<String> sortByCost(DigitalVideoDisc[] arr) {
		int n = arr.length;
		ArrayList<String> arrlist = new ArrayList<String>(n);
		quickSort(arr, 0, n-1);
		for (int i = 0; i<n; i++) {
			arrlist.add(arr[i].getTitle());
		}
		return arrlist;
	}
	 
	// This code is contributed by Ayush Choudhary
		
		
	
		
		
	

}
